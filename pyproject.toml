[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aicli"
version = "0.1.0"
description = "A beautiful CLI tool for conversational code assistance with LangChain"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "AICLI Contributors", email = "contact@aicli.dev"},
]
keywords = ["ai", "cli", "langchain", "code", "assistant", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = [
    # Core LangChain and LLM integrations
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-community>=0.0.20",
    "langchain-core>=0.1.0",
    
    # CLI framework and terminal UI
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    
    # Configuration and environment
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # File operations and utilities
    "pathspec>=0.11.0",
    "watchdog>=3.0.0",
    "gitpython>=3.1.0",
    
    # Vector search and embeddings (optional)
    "faiss-cpu>=1.7.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    
    # HTTP client for API calls
    "httpx>=0.24.0",
    "requests>=2.28.0",
    
    # Code analysis and formatting
    "tree-sitter>=0.20.0",
    "pygments>=2.14.0",
    
    # Async support
    "asyncio>=3.4.3",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    
    # Code formatting and linting
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    
    # Type stubs
    "types-pyyaml>=6.0.0",
    "types-requests>=2.28.0",
    
    # Development tools
    "ipython>=8.0.0",
    "ipdb>=0.13.0",
    "rich-cli>=1.8.0",
]

all = [
    # Additional LLM providers
    "langchain-fireworks>=0.1.0",
    "langchain-together>=0.1.0",
    "ollama>=0.1.0",
    
    # Enhanced vector search
    "hnswlib>=0.7.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    
    # Additional utilities
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
]

[project.urls]
Homepage = "https://github.com/aicli/aicli"
Documentation = "https://aicli.readthedocs.io"
Repository = "https://github.com/aicli/aicli"
"Bug Tracker" = "https://github.com/aicli/aicli/issues"

[project.scripts]
aicli = "aicli.cli:main"
claude-cli = "aicli.cli:main"

[tool.setuptools]
packages = ["aicli"]

[tool.setuptools.package-data]
aicli = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "chromadb.*",
    "faiss.*",
    "sentence_transformers.*",
    "tree_sitter.*",
]
ignore_missing_imports = true

# Pytest configuration  
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["aicli"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]